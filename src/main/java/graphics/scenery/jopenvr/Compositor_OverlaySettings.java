package graphics.scenery.jopenvr;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Compositor_OverlaySettings extends Structure<Compositor_OverlaySettings, Compositor_OverlaySettings.ByValue, Compositor_OverlaySettings.ByReference > {
	public int size;
	public byte curved;
	public byte antialias;
	public float scale;
	public float distance;
	public float alpha;
	public float uOffset;
	public float vOffset;
	public float uScale;
	public float vScale;
	public float gridDivs;
	public float gridWidth;
	public float gridScale;
	public HmdMatrix44_t transform;
	public Compositor_OverlaySettings() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("size", "curved", "antialias", "scale", "distance", "alpha", "uOffset", "vOffset", "uScale", "vScale", "gridDivs", "gridWidth", "gridScale", "transform");
	}
	public Compositor_OverlaySettings(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Compositor_OverlaySettings newInstance() { return new Compositor_OverlaySettings(); }
	public static Compositor_OverlaySettings[] newArray(int arrayLength) {
		return Structure.newArray(Compositor_OverlaySettings.class, arrayLength);
	}
	public static class ByReference extends Compositor_OverlaySettings implements Structure.ByReference {
		
	};
	public static class ByValue extends Compositor_OverlaySettings implements Structure.ByValue {
		
	};
}
